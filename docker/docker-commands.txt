##### Docker and Git commands cheatsheet version 28 #####

##### SSH connection commands #####
ssh -i C:\Users\david\.ssh\DA-KP-Bastion.pem ec2-user@35-170-217-54
ssh -i ~/.ssh/da-ml-keypair.pem -L localhost:8888:localhost:8888 ubuntu@<instance IP>
scp -i ~/.ssh/da-ml-keypair.pem conda_env.txt ubuntu@<instance IP>:/home/ubuntu


##### Container prep commands #####
scp conda_env.txt docker@10.0.5.??:/home/docker
scp .Renviron docker@10.0.5.??:/home/docker
scp id_rsa docker@10.0.5.??:/home/docker
scp Dockerfile-anaconda.txt docker@10.0.5.??:/home/docker
scp Dockerfile-pythonml.txt docker@10.0.5.??:/home/docker
scp Dockerfile-rstudio.txt docker@10.0.5.??:/home/docker

ssh -T git@github.com

git clone git@github.com:daines-analytics/datasets-public.git
git clone git@github.com:daines-analytics/deep-learning-projects.git
git clone git@github.com:daines-analytics/tabular-data-projects.git
git clone git@github.com:daines-analytics/template-latest.git
git clone git@github.com:daines-analytics/time-series-projects.git
git clone git@github.com:daines-analytics/under-development.git
git clone git@github.com:daines-analytics/web-scraping-projects.git

git fetch --all ; git reset --hard origin/master

openssl pkcs8 -in <KEYFILENAME> -nocrypt -topk8 -outform DER | openssl sha1 -c

cat train.csv.gz.* > ./train.csv.gz ; gzip -d train.csv.gz


##### Anaconda container commands #####
docker image build -t anaconda/nonroot:v2 .

docker container run --rm -it --env-file conda_env.txt -p 8080:8080 --name jupyter-server anaconda/nonroot:v2 /bin/bash

/opt/conda/bin/jupyter lab --ip=0.0.0.0 --port=8080 --no-browser --notebook-dir=/home/anaconda

/opt/conda/bin/jupyter notebook password  # Run server at least once first!

/opt/conda/bin/jupyter nbconvert --to html SCRIPT_NAME.ipynb

docker cp mycontainer:/home/anaconda/under-development/<folder>/<file>.ipynb ./


##### RStudio container commands #####
docker image build -t rstudio/nonroot:v2 .

docker container run --rm -e PASSWORD=rserver -p 8787:8787 --name rstudio-server rstudio/nonroot:v2

docker cp mycontainer:/home/rstudio/under-development/<folder>/<file>.Rmd ./


##### Python container commands #####
docker image build -t pythonml/nonroot:v1 .

docker container run --rm -it --env-file conda_env.txt -p 8080:8080 --name jupyter-server pythonml/nonroot:v1 /bin/bash

jupyter lab --ip=0.0.0.0 --port=8080 --no-browser --notebook-dir=/home/pythonml

jupyter notebook password  # Run server at least once first!

jupyter nbconvert --to html SCRIPT_NAME.ipynb

docker cp mycontainer:/home/pythonml/under-development/<folder>/<file>.ipynb ./


##### AWS Ubuntu AMI commands #####
jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=/home/ubuntu


##### Docker CE Installation on CentOS #####
$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2

$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

$ sudo yum install -y docker-ce docker-ce-cli containerd.io

$ sudo systemctl start docker

$ sudo systemctl enable docker

$ docker image ls

$ sudo groupadd docker # Might not be necessary - Check first
$ sudo usermod -aG docker $USER # Might not be necessary - Check first
$ docker run hello-world - Check first


##### Docker REMOVAL ONLY #####
$ sudo yum remove docker-ce

$ sudo rm -rf /var/lib/docker


##### AWS EC2 Setup for FastAI #####
sudo apt-get update | sudo apt-get upgrade | sudo apt-get autoremove

git clone https://github.com/daines-analytics/template-latest.git

git clone https://github.com/daines-analytics/deep-learning-projects.git

git clone https://github.com/fastai/course-v3

for TensorFlow(+Keras2) with Python3 (CUDA 10.0 and Intel MKL-DNN) -> source activate tensorflow_p36
for PyTorch with Python3 (CUDA 10.0 and Intel MKL) -> source activate pytorch_p36

conda update conda

conda install -c pytorch -c fastai fastai pytorch torchvision cuda92

cd course-v3/nbs/dl1

source ./conda_unix.txt
jupyter notebook


##### AWS EC2 Setup for TensorFlow on Ubuntu
sudo apt-get update
sudo apt-get upgrade

# Add NVIDIA package repositories
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.deb
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
sudo apt-get update
wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
sudo apt install ./nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.deb
sudo apt-get update

# Install NVIDIA driver
# sudo apt-get install --no-install-recommends nvidia-driver-418
sudo apt-get install nvidia-driver-440
# Reboot. Check that GPUs are visible using the command: nvidia-smi

# Install development and runtime libraries (~4GB)
# sudo apt-get install --no-install-recommends \
#     cuda-10-0 \
#     libcudnn7=7.6.2.24-1+cuda10.0  \
#     libcudnn7-dev=7.6.2.24-1+cuda10.0
sudo apt-get install cuda-10-2

sudo apt-get update
sudo apt-get upgrade

# sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1
# sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2
# sudo update-alternatives --set python /usr/bin/python3.6

sudo apt install -y python3-pip nodejs npm
sudo pip3 install --upgrade pip
sudo pip install numpy scipy matplotlib ipython sympy pandas jupyterlab
sudo pip install PyMySQL imbalanced-learn xgboost scikit-learn statsmodels
sudo pip install deap update_checker tqdm stopit ipywidgets tpot nodejs npm
sudo pip install seaborn pmdarima lxml html5lib requests beautifulsoup4
sudo pip install tensorflow tensorflow-gpu keras
sudo jupyter nbextension enable --py --sys-prefix widgetsnbextension
sudo jupyter labextension install @jupyter-widgets/jupyterlab-manager
